openapi: 3.0.3
info:
  title: ChatService API
  version: 0.1.0
  description: Contract for session, message, and streaming chat interactions.

servers:
  - url: http://localhost:8080
    description: dev

tags:
  - name: Chat
  - name: Conversation

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    SessionId:
      in: query
      name: sessionId
      required: true
      schema: { type: string }
      description: session identifier for question / answer.
    
    ConversationId:
      in: path
      name: conversationId
      required: true
      schema: { type: string }
      description: UUID of the conversation.

  schemas:
    ChatRequest:
      type: object
      required: [sessionId, content]
      additionalProperties: false
      properties:
        sessionId: { type: string, example: "abc123" }
        content:   { type: string, example: "Summarize this article" }
        settings:
          type: object
          additionalProperties: false
          properties:
            model: { type: string, example: "gpt-4-turbo" }
            temperature: { type: number, minimum: 0, maximum: 2, example: 0.7 }

    Ack:
      type: object
      properties:
        messageId: { type: string, example: "msg123" }
        status: { type: string, example: "acknowledged" }

    Error:
      type: object
      required: [code, error]
      properties:
        code:   { type: integer, example: 401 }
        error:  { type: string,  example: "Unauthorized" }
        message:{ type: string,  example: "Missing or invalid token." }
        details:
          type: object
          additionalProperties: true
    
    Conversation:
      type: object
      properties:
        id: {type: integer, example: 1 }
        conversationId: { type: string, example: "550e8400-e29b-41d4-a716-446655440000" }
        createdAt: { type: string, format: date-time, example: "2024-01-01T12:00:00Z" }
        updatedAt: { type: string, format: date-time, example: "2024-01-01T12:05:00Z" }

  responses:
    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }
          examples:
            default:
              value: { code: 401, error: "Unauthorized", message: "Missing or invalid token." }

    RateLimitError:
      description: Too Many Requests
      headers:
        Retry-After:
          description: Seconds to wait before retrying
          schema: { type: integer, example: 30 }
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }
          examples:
            default:
              value: { code: 429, error: "Rate limit exceeded", message: "Try again later." }

paths:
# CHAT ENDPOINTS ----------------------------------------------------------------------------------------
  /chat/message:
    post:
      tags: [Chat]
      summary: Send a user message to a chat session
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ChatRequest" }
            examples:
              default:
                value:
                  sessionId: "abc123"
                  content: "Summarize this article"
                  settings:
                    model: "gpt-4-turbo"
                    temperature: 0.7
      responses:
        "200":
          description: Acknowledged; read streamed response from /chat/stream
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Ack" }
              examples:
                default:
                  value:
                    messageId: "msg123"
                    status: "acknowledged"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "429":
          $ref: "#/components/responses/RateLimitError"

  /chat/stream/{sessionId}:
    get:
      tags: [Chat]
      summary: Response stream via Server-Sent Events (SSE)
      description: |
        Opens a long-lived SSE connection (`text/event-stream`).
        Emits JSON frames like:
          {"type":"delta","delta":"Hello"}
          {"type":"delta","delta":" world"}
          {"type":"done"}
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: "#/components/parameters/SessionId"
      responses:
        "200":
          description: text/event-stream of chat output
          content:
            text/event-stream:
              schema:
                type: string
              examples:
                sample:
                  summary: Example SSE stream (conceptual)
                  value: |
                    data: {"type":"delta","delta":"Hello"}

                    data: {"type":"delta","delta":" world"}

                    data: {"type":"done"}
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "429":
          $ref: "#/components/responses/RateLimitError"
# CONVERSATION ENDPOINTS --------------------------------------------------------------------------------
  /conversation/create:
    post:
      tags: [Conversation]
      summary: Create a new conversation and store in DB
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Conversation'}
            examples:
              default:
                value:
                  conversationId: "550e8400-e29b-41d4-a716-446655440000"
                  createdAt: "2024-01-01T12:00:00Z"
                  updatedAt: "2024-01-01T12:05:00Z"
      
      responses:
        "200":
          description: Conversation created successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Ack" }
              examples:
                default:
                  value:
                    messageId: "conv123"
                    status: "created"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "429":
          $ref: "#/components/responses/RateLimitError"

  /conversation/{conversationId}:
    get:
      tags: [Conversation]
      summary: Retrieve a conversation by its ID
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: "#/components/parameters/ConversationId"
      responses:
        "200":
          description: Conversation retrieved successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Conversation" }
              examples:
                default:
                  value:
                    id: 1
                    conversationId: "550e8400-e29b-41d4-a716-446655440000"
                    createdAt: "2024-01-01T12:00:00Z"
                    updatedAt: "2024-01-01T12:05:00Z"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "429":
          $ref: "#/components/responses/RateLimitError"

  /conversation/all:
    get:
      tags: [Conversation]
      summary: List all conversations
      description: Returns a list of all conversations for the authenticated user.
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: List of conversations
          content:
            application/json:
              schema: 
                type: array
                items: $ref: "#/components/schemas/Conversations"
              examples:
                sampleList:
                  summary: Example list of conversations
                  value:
                    - id: 1
                      conversationId: "550e8400-e29b-41d4-a716-446655440000"
                      createdAt: "2024-01-01T12:00:00Z"
                      updatedAt: "2024-01-01T12:05:00Z"
                    - id: 2
                      conversationId: "660e8400-e29b-41d4-a716-446655440111"
                      createdAt: "2024-01-02T14:00:00Z"
                      updatedAt: "2024-01-02T14:10:00Z"
                    - id: 2
                      conversationId: "660e8400-e29b-41d4-a716-446655440111"
                      createdAt: "2024-01-02T14:00:00Z"
                      updatedAt: "2024-01-02T14:10:00Z"
                    - id: 2
                      conversationId: "660e8400-e29b-41d4-a716-446655440111"
                      createdAt: "2024-01-02T14:00:00Z"
                      updatedAt: "2024-01-02T14:10:00Z"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "429":
          $ref: "#/components/responses/RateLimitError"
